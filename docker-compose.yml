services:
  spring-app:
    build: .
    container_name: cronos-system-price
    restart: unless-stopped
    depends_on:
      postgres-db:
        condition: service_healthy
    ports:
      - "8088:8080"
    volumes:
      - .:/app
    networks:
      - app-cronos-price-network-manager
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/cronos_system_price_data
      - SPRING_DATASOURCE_USERNAME=cronos_system_user_price_mnr
      - SPRING_DATASOURCE_PASSWORD=cronos_system_254_8765_csmy-dd_0987_mnr
      - JWT_SECRET=OHmSZ+gdbyIu2cOaIK325VPhZs8Y0EW/jgAittcj+tsYIcXVXf5rESXzqfTe9uJsX9WfoD6DKTCeZO2SIjLBdA==
    command: ["./mvnw", "spring-boot:run"]
  postgres-db:
    image: postgres:15-alpine
    container_name: postgres-database
    restart: unless-stopped
    environment:
      POSTGRES_DB: cronos_system_price_data
      POSTGRES_USER: cronos_system_user_price_mnr
      POSTGRES_PASSWORD: cronos_system_254_8765_csmy-dd_0987_mnr
    volumes:
      - postgres_cronos_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - app-cronos-price-network-manager
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U cronos_system_user_price_mnr -d cronos_system_price_data" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  postgres_cronos_data:
    driver: local

networks:
  app-cronos-price-network-manager:
    driver: bridge